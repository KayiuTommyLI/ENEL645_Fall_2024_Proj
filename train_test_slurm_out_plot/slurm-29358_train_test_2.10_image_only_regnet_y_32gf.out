no change     /home/tommy.li1/miniforge3/condabin/conda
no change     /home/tommy.li1/miniforge3/bin/conda
no change     /home/tommy.li1/miniforge3/bin/conda-env
no change     /home/tommy.li1/miniforge3/bin/activate
no change     /home/tommy.li1/miniforge3/bin/deactivate
no change     /home/tommy.li1/miniforge3/etc/profile.d/conda.sh
no change     /home/tommy.li1/miniforge3/etc/fish/conf.d/conda.fish
no change     /home/tommy.li1/miniforge3/shell/condabin/Conda.psm1
no change     /home/tommy.li1/miniforge3/shell/condabin/conda-hook.ps1
no change     /home/tommy.li1/miniforge3/lib/python3.10/site-packages/xontrib/conda.xsh
no change     /home/tommy.li1/miniforge3/etc/profile.d/conda.csh
no change     /home/tommy.li1/.bashrc
No action taken.
[nltk_data] Downloading package wordnet to
[nltk_data]     /home/tommy.li1/nltk_data...
[nltk_data]   Package wordnet is already up-to-date!
[nltk_data] Downloading package stopwords to
[nltk_data]     /home/tommy.li1/nltk_data...
[nltk_data]   Package stopwords is already up-to-date!
2024-11-24 15:53:14.039705: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2024-11-24 15:53:14.063275: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:485] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered
2024-11-24 15:53:14.092927: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:8454] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered
2024-11-24 15:53:14.101968: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1452] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered
2024-11-24 15:53:14.122831: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX512F AVX512_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
2024-11-24 15:53:17.142516: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT
2024-11-24 15:53:23 - INFO - Using device: cuda
[2024-11-24 15:53:23] 
Configuration:
[2024-11-24 15:53:23] Mode: train
[2024-11-24 15:53:23] Modality: image_only
[2024-11-24 15:53:23] 
Model Settings:
[2024-11-24 15:53:23] - Number of classes: 4
[2024-11-24 15:53:23] - Text model: bert-base-uncased
[2024-11-24 15:53:23] - Image model: regnet_y_32gf
[2024-11-24 15:53:23] - Hidden sizes: [256]
[2024-11-24 15:53:23] - Use text: False
[2024-11-24 15:53:23] - Use image: True
[2024-11-24 15:53:23] - Use caption: False
[2024-11-24 15:53:23] - Caption mode: none
[2024-11-24 15:53:23] - Use garbage feature: False
[2024-11-24 15:53:23] - Use similarity: False
[2024-11-24 15:53:23] 
Training Settings:
[2024-11-24 15:53:23] - Batch size: 24
[2024-11-24 15:53:23] - Learning rate: 1e-05
[2024-11-24 15:53:23] - Number of epochs: 50
[2024-11-24 15:53:23] - Max sequence length: 300
[2024-11-24 15:53:23] - Dropout rate: 0.3
[2024-11-24 15:53:23] - Early stopping patience: 5
[2024-11-24 15:53:23] - Weight decay: 0.01
[2024-11-24 15:53:23] - Label smoothing: 0.0
[2024-11-24 15:53:23] 
2024-11-24 15:53:23 - INFO - Initialized bert-base-uncased tokenizer
/home/tommy.li1/Git/ENGL645_Fall_2024_Proj/Project-Benchmark/main.py:360: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint = torch.load('checkpoints/best_model.pt')
[2024-11-24 15:53:23] Loading Train data from: /work/TALC/enel645_2024f/garbage_data/CVPR_2024_dataset_Train
[2024-11-24 15:53:23] Loading Val data from: /work/TALC/enel645_2024f/garbage_data/CVPR_2024_dataset_Val
[2024-11-24 15:53:23] Loading Test data from: /work/TALC/enel645_2024f/garbage_data/CVPR_2024_dataset_Test

Train Dataset Statistics:
Size: 10200
Class distribution: {0: 2111, 1: 4355, 2: 1991, 3: 1743}

Val Dataset Statistics:
Size: 1800
Class distribution: {0: 372, 1: 768, 2: 352, 3: 308}

Test Dataset Statistics:
Size: 3431
Class distribution: {0: 695, 1: 1085, 2: 799, 3: 852}
[2024-11-24 15:53:31] Phase 1: Training classifier with frozen feature extractors
Model mode: False
[2024-11-24 16:17:38] Epoch 1/50 - Train Loss: 0.6592 - Val Loss: 0.5540 - Val Acc: 0.7917
Checkpoint saved to checkpoints/best_model.pt
[2024-11-24 16:17:41] Save best_model.pt for Loss at epochs 1 
Model mode: False
[2024-11-24 16:41:49] Epoch 2/50 - Train Loss: 0.3221 - Val Loss: 0.4871 - Val Acc: 0.8261
Checkpoint saved to checkpoints/best_model.pt
[2024-11-24 16:41:52] Save best_model.pt for Loss at epochs 2 
Model mode: False
[2024-11-24 17:06:03] Epoch 3/50 - Train Loss: 0.1873 - Val Loss: 0.4727 - Val Acc: 0.8322
Checkpoint saved to checkpoints/best_model.pt
[2024-11-24 17:06:05] Save best_model.pt for Loss at epochs 3 
Model mode: False
[2024-11-24 17:30:14] Epoch 4/50 - Train Loss: 0.1244 - Val Loss: 0.4709 - Val Acc: 0.8383
Checkpoint saved to checkpoints/best_model.pt
[2024-11-24 17:30:18] Save best_model.pt for Loss at epochs 4 
Model mode: False
[2024-11-24 17:54:21] Epoch 5/50 - Train Loss: 0.0898 - Val Loss: 0.4844 - Val Acc: 0.8428
Checkpoint saved to checkpoints/best_model.pt
[2024-11-24 17:54:24] Save best_model.pt for Accuracy at epochs 5 
Model mode: False
[2024-11-24 18:18:28] Epoch 6/50 - Train Loss: 0.0650 - Val Loss: 0.5148 - Val Acc: 0.8433
Checkpoint saved to checkpoints/best_model.pt
[2024-11-24 18:18:31] Save best_model.pt for Accuracy at epochs 6 
Model mode: False
[2024-11-24 18:42:36] Epoch 7/50 - Train Loss: 0.0571 - Val Loss: 0.5271 - Val Acc: 0.8433
Model mode: False
[2024-11-24 19:06:39] Epoch 8/50 - Train Loss: 0.0425 - Val Loss: 0.5490 - Val Acc: 0.8417
Model mode: False
[2024-11-24 19:30:45] Epoch 9/50 - Train Loss: 0.0475 - Val Loss: 0.5600 - Val Acc: 0.8433
Model mode: False
[2024-11-24 19:54:50] Learning rate updated to: 1.0000000000000002e-06
[2024-11-24 19:54:50] Epoch 10/50 - Train Loss: 0.0403 - Val Loss: 0.5620 - Val Acc: 0.8444
Checkpoint saved to checkpoints/best_model.pt
[2024-11-24 19:54:53] Save best_model.pt for Accuracy at epochs 10 
Model mode: False
[2024-11-24 20:18:58] Epoch 11/50 - Train Loss: 0.0354 - Val Loss: 0.5559 - Val Acc: 0.8450
Checkpoint saved to checkpoints/best_model.pt
[2024-11-24 20:19:01] Save best_model.pt for Accuracy at epochs 11 
Model mode: False
[2024-11-24 20:43:05] Epoch 12/50 - Train Loss: 0.0236 - Val Loss: 0.5405 - Val Acc: 0.8483
Checkpoint saved to checkpoints/best_model.pt
[2024-11-24 20:43:08] Save best_model.pt for Accuracy at epochs 12 
Model mode: False
[2024-11-24 21:07:13] Epoch 13/50 - Train Loss: 0.0220 - Val Loss: 0.5440 - Val Acc: 0.8456
Model mode: False
[2024-11-24 21:31:15] Epoch 14/50 - Train Loss: 0.0188 - Val Loss: 0.5388 - Val Acc: 0.8517
Checkpoint saved to checkpoints/best_model.pt
[2024-11-24 21:31:18] Save best_model.pt for Accuracy at epochs 14 
Model mode: False
[2024-11-24 21:55:22] Epoch 15/50 - Train Loss: 0.0174 - Val Loss: 0.5426 - Val Acc: 0.8506
Model mode: False
[2024-11-24 22:19:25] Learning rate updated to: 1.0000000000000002e-07
[2024-11-24 22:19:25] Epoch 16/50 - Train Loss: 0.0174 - Val Loss: 0.5516 - Val Acc: 0.8511
Model mode: False
[2024-11-24 22:43:30] Epoch 17/50 - Train Loss: 0.0149 - Val Loss: 0.5596 - Val Acc: 0.8467
Model mode: False
[2024-11-24 23:07:37] Epoch 18/50 - Train Loss: 0.0137 - Val Loss: 0.5395 - Val Acc: 0.8489
Model mode: False
[2024-11-24 23:31:41] Epoch 19/50 - Train Loss: 0.0163 - Val Loss: 0.5660 - Val Acc: 0.8472
[2024-11-24 23:31:41] Early stopping triggered after epochs 19 
[2024-11-24 23:31:42] Loading best model from Phase 1
[2024-11-24 23:31:51] Phase 2: Fine-tuning feature extractors

Feature Extractor States:
Text model exists: True
Text model trainable: True
Image model exists: True
Image model trainable: True
Model mode: False
[2024-11-24 23:55:51] Epoch 1/50 - Train Loss: 0.0172 - Val Loss: 0.5642 - Val Acc: 0.8461
Checkpoint saved to checkpoints/best_model.pt
[2024-11-24 23:55:54] Save best_model.pt for Loss at epochs 1 
Model mode: False
[2024-11-25 00:19:55] Epoch 2/50 - Train Loss: 0.0145 - Val Loss: 0.5675 - Val Acc: 0.8472
Checkpoint saved to checkpoints/best_model.pt
[2024-11-25 00:19:59] Save best_model.pt for Accuracy at epochs 2 
Model mode: False
[2024-11-25 00:44:05] Epoch 3/50 - Train Loss: 0.0139 - Val Loss: 0.5548 - Val Acc: 0.8494
Checkpoint saved to checkpoints/best_model.pt
[2024-11-25 00:44:09] Save best_model.pt for Loss at epochs 3 
Model mode: False
[2024-11-25 01:08:11] Epoch 4/50 - Train Loss: 0.0127 - Val Loss: 0.5735 - Val Acc: 0.8533
Checkpoint saved to checkpoints/best_model.pt
[2024-11-25 01:08:14] Save best_model.pt for Accuracy at epochs 4 
Model mode: False
[2024-11-25 01:32:16] Epoch 5/50 - Train Loss: 0.0134 - Val Loss: 0.5671 - Val Acc: 0.8472
Model mode: False
[2024-11-25 01:56:20] Epoch 6/50 - Train Loss: 0.0122 - Val Loss: 0.5739 - Val Acc: 0.8494
Model mode: False
[2024-11-25 02:20:21] Epoch 7/50 - Train Loss: 0.0123 - Val Loss: 0.5818 - Val Acc: 0.8517
Model mode: False
[2024-11-25 02:44:25] Epoch 8/50 - Train Loss: 0.0106 - Val Loss: 0.5977 - Val Acc: 0.8472
Model mode: False
[2024-11-25 03:08:28] Learning rate updated to: 1.0000000000000002e-07
[2024-11-25 03:08:28] Epoch 9/50 - Train Loss: 0.0096 - Val Loss: 0.5809 - Val Acc: 0.8539
Checkpoint saved to checkpoints/best_model.pt
[2024-11-25 03:08:31] Save best_model.pt for Accuracy at epochs 9 
Model mode: False
[2024-11-25 03:32:32] Epoch 10/50 - Train Loss: 0.0106 - Val Loss: 0.5970 - Val Acc: 0.8467
Model mode: False
[2024-11-25 03:56:33] Epoch 11/50 - Train Loss: 0.0095 - Val Loss: 0.5686 - Val Acc: 0.8511
Model mode: False
[2024-11-25 04:20:33] Epoch 12/50 - Train Loss: 0.0108 - Val Loss: 0.5800 - Val Acc: 0.8478
Model mode: False
[2024-11-25 04:44:34] Epoch 13/50 - Train Loss: 0.0104 - Val Loss: 0.5732 - Val Acc: 0.8522
Model mode: False
[2024-11-25 05:08:34] Epoch 14/50 - Train Loss: 0.0103 - Val Loss: 0.6008 - Val Acc: 0.8439
[2024-11-25 05:08:34] Early stopping triggered after epochs 14 
[nltk_data] Downloading package wordnet to
[nltk_data]     /home/tommy.li1/nltk_data...
[nltk_data]   Package wordnet is already up-to-date!
[nltk_data] Downloading package stopwords to
[nltk_data]     /home/tommy.li1/nltk_data...
[nltk_data]   Package stopwords is already up-to-date!
2024-11-25 05:08:52.257672: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2024-11-25 05:08:52.280871: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:485] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered
2024-11-25 05:08:52.309814: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:8454] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered
2024-11-25 05:08:52.318759: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1452] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered
2024-11-25 05:08:52.339194: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX512F AVX512_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
2024-11-25 05:08:55.277713: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT
2024-11-25 05:09:00 - INFO - Using device: cuda
[2024-11-25 05:09:00] 
Configuration:
[2024-11-25 05:09:00] Mode: test
[2024-11-25 05:09:00] Modality: image_only
[2024-11-25 05:09:00] 
Model Settings:
[2024-11-25 05:09:00] - Number of classes: 4
[2024-11-25 05:09:00] - Text model: bert-base-uncased
[2024-11-25 05:09:00] - Image model: regnet_y_32gf
[2024-11-25 05:09:00] - Hidden sizes: [256]
[2024-11-25 05:09:00] - Use text: False
[2024-11-25 05:09:00] - Use image: True
[2024-11-25 05:09:00] - Use caption: False
[2024-11-25 05:09:00] - Caption mode: none
[2024-11-25 05:09:00] - Use garbage feature: False
[2024-11-25 05:09:00] - Use similarity: False
[2024-11-25 05:09:00] 
Training Settings:
[2024-11-25 05:09:00] - Batch size: 24
[2024-11-25 05:09:00] - Learning rate: 1e-05
[2024-11-25 05:09:00] - Number of epochs: 50
[2024-11-25 05:09:00] - Max sequence length: 300
[2024-11-25 05:09:00] - Dropout rate: 0.3
[2024-11-25 05:09:00] - Early stopping patience: 5
[2024-11-25 05:09:00] - Weight decay: 0.01
[2024-11-25 05:09:00] - Label smoothing: 0.0
[2024-11-25 05:09:00] 
2024-11-25 05:09:00 - INFO - Initialized bert-base-uncased tokenizer
/home/tommy.li1/Git/ENGL645_Fall_2024_Proj/Project-Benchmark/main.py:439: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint = torch.load('checkpoints/best_model.pt')
[2024-11-25 05:09:00] Loading Train data from: /work/TALC/enel645_2024f/garbage_data/CVPR_2024_dataset_Train
[2024-11-25 05:09:00] Loading Val data from: /work/TALC/enel645_2024f/garbage_data/CVPR_2024_dataset_Val
[2024-11-25 05:09:00] Loading Test data from: /work/TALC/enel645_2024f/garbage_data/CVPR_2024_dataset_Test

Train Dataset Statistics:
Size: 10200
Class distribution: {0: 2111, 1: 4355, 2: 1991, 3: 1743}

Val Dataset Statistics:
Size: 1800
Class distribution: {0: 372, 1: 768, 2: 352, 3: 308}

Test Dataset Statistics:
Size: 3431
Class distribution: {0: 695, 1: 1085, 2: 799, 3: 852}
Model mode: False
test_results['accuracy'] 0.8111337802389974
test_results['precision'] 0.8157714817309198
test_results['recall'] 0.8111337802389974
test_results['f1'] 0.8101040565033483
test_results['loss'] 0.7894373102849545

Confusion Matrix:
--------------------------------------------------
[[460 139  25  71]
 [ 64 966  31  24]
 [ 32  56 708   3]
 [ 61 129  13 649]]
Classification results saved to test_classification_results.json
