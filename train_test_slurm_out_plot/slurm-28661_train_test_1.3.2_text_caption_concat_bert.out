[nltk_data] Downloading package wordnet to
[nltk_data]     /home/jeffrey.wong1/nltk_data...
[nltk_data]   Package wordnet is already up-to-date!
[nltk_data] Downloading package stopwords to
[nltk_data]     /home/jeffrey.wong1/nltk_data...
[nltk_data]   Package stopwords is already up-to-date!
2024-11-21 22:19:06 - INFO - Using device: cuda
[2024-11-21 22:19:06] 
Configuration:
[2024-11-21 22:19:06] Mode: train
[2024-11-21 22:19:06] Modality: text_caption_concat
[2024-11-21 22:19:06] 
Model Settings:
[2024-11-21 22:19:06] - Number of classes: 4
[2024-11-21 22:19:06] - Text model: bert-base-uncased
[2024-11-21 22:19:06] - Image model: resnet18
[2024-11-21 22:19:06] - Hidden sizes: [256]
[2024-11-21 22:19:06] - Use text: True
[2024-11-21 22:19:06] - Use image: False
[2024-11-21 22:19:06] - Use caption: True
[2024-11-21 22:19:06] - Caption mode: CaptionMode.CONCATENATE
[2024-11-21 22:19:06] - Use garbage feature: False
[2024-11-21 22:19:06] - Use similarity: False
[2024-11-21 22:19:06] 
Training Settings:
[2024-11-21 22:19:06] - Batch size: 24
[2024-11-21 22:19:06] - Learning rate: 1e-05
[2024-11-21 22:19:06] - Number of epochs: 50
[2024-11-21 22:19:06] - Max sequence length: 300
[2024-11-21 22:19:06] - Dropout rate: 0.3
[2024-11-21 22:19:06] - Early stopping patience: 5
[2024-11-21 22:19:06] - Weight decay: 0.01
[2024-11-21 22:19:06] - Label smoothing: 0.0
[2024-11-21 22:19:06] 
2024-11-21 22:19:07 - INFO - Initialized bert-base-uncased tokenizer
/home/jeffrey.wong1/github_repo/ENGL645_Fall_2024_Proj/Project-Benchmark/main.py:374: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint = torch.load('checkpoints/best_model.pt')
[2024-11-21 22:19:07] Loading Train data from: /work/TALC/enel645_2024f/garbage_data/CVPR_2024_dataset_Train
[2024-11-21 22:19:07] Loading Val data from: /work/TALC/enel645_2024f/garbage_data/CVPR_2024_dataset_Val
[2024-11-21 22:19:07] Loading Test data from: /work/TALC/enel645_2024f/garbage_data/CVPR_2024_dataset_Test
Loaded captions: 15431
Loaded captions: 15431
Loaded captions: 15431

Train Dataset Statistics:
Size: 10200
Class distribution: {np.int64(0): np.int64(2111), np.int64(1): np.int64(4355), np.int64(2): np.int64(1991), np.int64(3): np.int64(1743)}

Val Dataset Statistics:
Size: 1800
Class distribution: {np.int64(0): np.int64(372), np.int64(1): np.int64(768), np.int64(2): np.int64(352), np.int64(3): np.int64(308)}

Test Dataset Statistics:
Size: 3431
Class distribution: {np.int64(0): np.int64(695), np.int64(1): np.int64(1085), np.int64(2): np.int64(799), np.int64(3): np.int64(852)}
[2024-11-21 22:19:08] Phase 1: Training classifier with frozen feature extractors
Model mode: False
[2024-11-21 22:27:26] Epoch 1/50 - Train Loss: 0.5542 - Val Loss: 0.3672 - Val Acc: 0.8711
Checkpoint saved to checkpoints/best_model.pt
[2024-11-21 22:27:27] Save best_model.pt for Loss at epochs 1 
Model mode: False
[2024-11-21 22:35:47] Epoch 2/50 - Train Loss: 0.2996 - Val Loss: 0.3239 - Val Acc: 0.8956
Checkpoint saved to checkpoints/best_model.pt
[2024-11-21 22:35:48] Save best_model.pt for Loss at epochs 2 
Model mode: False
[2024-11-21 22:44:08] Epoch 3/50 - Train Loss: 0.2300 - Val Loss: 0.3260 - Val Acc: 0.8972
Checkpoint saved to checkpoints/best_model.pt
[2024-11-21 22:44:09] Save best_model.pt for Accuracy at epochs 3 
Model mode: False
[2024-11-21 22:52:28] Epoch 4/50 - Train Loss: 0.1805 - Val Loss: 0.3682 - Val Acc: 0.8933
Model mode: False
[2024-11-21 23:00:47] Epoch 5/50 - Train Loss: 0.1653 - Val Loss: 0.3778 - Val Acc: 0.8744
Model mode: False
[2024-11-21 23:09:06] Epoch 6/50 - Train Loss: 0.1178 - Val Loss: 0.3873 - Val Acc: 0.8861
Model mode: False
[2024-11-21 23:17:25] Epoch 7/50 - Train Loss: 0.1009 - Val Loss: 0.3620 - Val Acc: 0.8961
Model mode: False
[2024-11-21 23:25:44] Learning rate updated to: 1.0000000000000002e-06
[2024-11-21 23:25:44] Epoch 8/50 - Train Loss: 0.0914 - Val Loss: 0.3901 - Val Acc: 0.9011
Checkpoint saved to checkpoints/best_model.pt
[2024-11-21 23:25:45] Save best_model.pt for Accuracy at epochs 8 
Model mode: False
[2024-11-21 23:34:05] Epoch 9/50 - Train Loss: 0.0710 - Val Loss: 0.3862 - Val Acc: 0.9033
Checkpoint saved to checkpoints/best_model.pt
[2024-11-21 23:34:06] Save best_model.pt for Accuracy at epochs 9 
Model mode: False
[2024-11-21 23:42:25] Epoch 10/50 - Train Loss: 0.0574 - Val Loss: 0.3907 - Val Acc: 0.8994
Model mode: False
[2024-11-21 23:50:44] Epoch 11/50 - Train Loss: 0.0545 - Val Loss: 0.3928 - Val Acc: 0.9039
Checkpoint saved to checkpoints/best_model.pt
[2024-11-21 23:50:45] Save best_model.pt for Accuracy at epochs 11 
Model mode: False
[2024-11-21 23:59:04] Epoch 12/50 - Train Loss: 0.0590 - Val Loss: 0.4075 - Val Acc: 0.8983
Model mode: False
[2024-11-22 00:07:22] Epoch 13/50 - Train Loss: 0.0467 - Val Loss: 0.4278 - Val Acc: 0.8944
Model mode: False
[2024-11-22 00:15:41] Learning rate updated to: 1.0000000000000002e-07
[2024-11-22 00:15:41] Epoch 14/50 - Train Loss: 0.0462 - Val Loss: 0.4031 - Val Acc: 0.9056
Checkpoint saved to checkpoints/best_model.pt
[2024-11-22 00:15:42] Save best_model.pt for Accuracy at epochs 14 
Model mode: False
[2024-11-22 00:24:01] Epoch 15/50 - Train Loss: 0.0447 - Val Loss: 0.4166 - Val Acc: 0.9017
Model mode: False
[2024-11-22 00:32:20] Epoch 16/50 - Train Loss: 0.0486 - Val Loss: 0.4104 - Val Acc: 0.9000
Model mode: False
[2024-11-22 00:40:39] Epoch 17/50 - Train Loss: 0.0442 - Val Loss: 0.4210 - Val Acc: 0.8989
Model mode: False
[2024-11-22 00:48:57] Epoch 18/50 - Train Loss: 0.0445 - Val Loss: 0.4185 - Val Acc: 0.9000
Model mode: False
[2024-11-22 00:57:16] Epoch 19/50 - Train Loss: 0.0490 - Val Loss: 0.4179 - Val Acc: 0.9006
[2024-11-22 00:57:16] Early stopping triggered after epochs 19 
[2024-11-22 00:57:17] Loading best model from Phase 1
[2024-11-22 00:57:31] Phase 2: Fine-tuning feature extractors

Feature Extractor States:
Text model exists: True
Text model trainable: True
Model mode: False
[2024-11-22 01:05:48] Epoch 1/50 - Train Loss: 0.0431 - Val Loss: 0.4309 - Val Acc: 0.8967
Checkpoint saved to checkpoints/best_model.pt
[2024-11-22 01:05:50] Save best_model.pt for Loss at epochs 1 
Model mode: False
[2024-11-22 01:14:08] Epoch 2/50 - Train Loss: 0.0503 - Val Loss: 0.4276 - Val Acc: 0.8994
Checkpoint saved to checkpoints/best_model.pt
[2024-11-22 01:14:09] Save best_model.pt for Loss at epochs 2 
Model mode: False
[2024-11-22 01:22:27] Epoch 3/50 - Train Loss: 0.0485 - Val Loss: 0.4275 - Val Acc: 0.9006
Checkpoint saved to checkpoints/best_model.pt
[2024-11-22 01:22:29] Save best_model.pt for Loss at epochs 3 
Model mode: False
[2024-11-22 01:30:47] Epoch 4/50 - Train Loss: 0.0378 - Val Loss: 0.4394 - Val Acc: 0.8983
Model mode: False
[2024-11-22 01:39:05] Epoch 5/50 - Train Loss: 0.0404 - Val Loss: 0.4457 - Val Acc: 0.8994
Model mode: False
[2024-11-22 01:47:24] Epoch 6/50 - Train Loss: 0.0388 - Val Loss: 0.4608 - Val Acc: 0.8972
Model mode: False
[2024-11-22 01:55:42] Epoch 7/50 - Train Loss: 0.0336 - Val Loss: 0.4517 - Val Acc: 0.8989
Model mode: False
[2024-11-22 02:04:01] Epoch 8/50 - Train Loss: 0.0330 - Val Loss: 0.4584 - Val Acc: 0.8994
[2024-11-22 02:04:01] Early stopping triggered after epochs 8 
[nltk_data] Downloading package wordnet to
[nltk_data]     /home/jeffrey.wong1/nltk_data...
[nltk_data]   Package wordnet is already up-to-date!
[nltk_data] Downloading package stopwords to
[nltk_data]     /home/jeffrey.wong1/nltk_data...
[nltk_data]   Package stopwords is already up-to-date!
2024-11-22 02:04:40 - INFO - Using device: cuda
[2024-11-22 02:04:40] 
Configuration:
[2024-11-22 02:04:40] Mode: test
[2024-11-22 02:04:40] Modality: text_caption_concat
[2024-11-22 02:04:40] 
Model Settings:
[2024-11-22 02:04:40] - Number of classes: 4
[2024-11-22 02:04:40] - Text model: bert-base-uncased
[2024-11-22 02:04:40] - Image model: resnet18
[2024-11-22 02:04:40] - Hidden sizes: [256]
[2024-11-22 02:04:40] - Use text: True
[2024-11-22 02:04:40] - Use image: False
[2024-11-22 02:04:40] - Use caption: True
[2024-11-22 02:04:40] - Caption mode: CaptionMode.CONCATENATE
[2024-11-22 02:04:40] - Use garbage feature: False
[2024-11-22 02:04:40] - Use similarity: False
[2024-11-22 02:04:40] 
Training Settings:
[2024-11-22 02:04:40] - Batch size: 24
[2024-11-22 02:04:40] - Learning rate: 1e-05
[2024-11-22 02:04:40] - Number of epochs: 50
[2024-11-22 02:04:40] - Max sequence length: 300
[2024-11-22 02:04:40] - Dropout rate: 0.3
[2024-11-22 02:04:40] - Early stopping patience: 5
[2024-11-22 02:04:40] - Weight decay: 0.01
[2024-11-22 02:04:40] - Label smoothing: 0.0
[2024-11-22 02:04:40] 
2024-11-22 02:04:51 - INFO - Initialized bert-base-uncased tokenizer
/home/jeffrey.wong1/github_repo/ENGL645_Fall_2024_Proj/Project-Benchmark/main.py:453: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint = torch.load('checkpoints/best_model.pt')
[2024-11-22 02:04:51] Loading Train data from: /work/TALC/enel645_2024f/garbage_data/CVPR_2024_dataset_Train
[2024-11-22 02:04:51] Loading Val data from: /work/TALC/enel645_2024f/garbage_data/CVPR_2024_dataset_Val
[2024-11-22 02:04:51] Loading Test data from: /work/TALC/enel645_2024f/garbage_data/CVPR_2024_dataset_Test
Loaded captions: 15431
Loaded captions: 15431
Loaded captions: 15431

Train Dataset Statistics:
Size: 10200
Class distribution: {np.int64(0): np.int64(2111), np.int64(1): np.int64(4355), np.int64(2): np.int64(1991), np.int64(3): np.int64(1743)}

Val Dataset Statistics:
Size: 1800
Class distribution: {np.int64(0): np.int64(372), np.int64(1): np.int64(768), np.int64(2): np.int64(352), np.int64(3): np.int64(308)}

Test Dataset Statistics:
Size: 3431
Class distribution: {np.int64(0): np.int64(695), np.int64(1): np.int64(1085), np.int64(2): np.int64(799), np.int64(3): np.int64(852)}
Model mode: False
test_results['accuracy'] 0.8595161760419703
test_results['precision'] 0.8591786190148316
test_results['recall'] 0.8595161760419703
test_results['f1'] 0.8583151020351427
test_results['loss'] 0.6006932767731679

Confusion Matrix:
--------------------------------------------------
[[518  93  26  58]
 [ 51 967  49  18]
 [ 15  13 768   3]
 [ 74  68  14 696]]
Classification results saved to test_classification_results.json
