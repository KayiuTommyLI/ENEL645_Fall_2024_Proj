no change     /home/tommy.li1/miniforge3/condabin/conda
no change     /home/tommy.li1/miniforge3/bin/conda
no change     /home/tommy.li1/miniforge3/bin/conda-env
no change     /home/tommy.li1/miniforge3/bin/activate
no change     /home/tommy.li1/miniforge3/bin/deactivate
no change     /home/tommy.li1/miniforge3/etc/profile.d/conda.sh
no change     /home/tommy.li1/miniforge3/etc/fish/conf.d/conda.fish
no change     /home/tommy.li1/miniforge3/shell/condabin/Conda.psm1
no change     /home/tommy.li1/miniforge3/shell/condabin/conda-hook.ps1
no change     /home/tommy.li1/miniforge3/lib/python3.10/site-packages/xontrib/conda.xsh
no change     /home/tommy.li1/miniforge3/etc/profile.d/conda.csh
no change     /home/tommy.li1/.bashrc
No action taken.
[nltk_data] Downloading package wordnet to
[nltk_data]     /home/tommy.li1/nltk_data...
[nltk_data]   Package wordnet is already up-to-date!
[nltk_data] Downloading package stopwords to
[nltk_data]     /home/tommy.li1/nltk_data...
[nltk_data]   Package stopwords is already up-to-date!
2024-12-01 13:45:50.816424: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2024-12-01 13:45:50.840150: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:485] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered
2024-12-01 13:45:50.869714: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:8454] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered
2024-12-01 13:45:50.878831: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1452] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered
2024-12-01 13:45:50.899847: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX512F AVX512_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
2024-12-01 13:45:54.184833: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT
2024-12-01 13:46:01 - INFO - Using device: cuda
[2024-12-01 13:46:01] 
Configuration:
[2024-12-01 13:46:01] Mode: train
[2024-12-01 13:46:01] Modality: text_caption_image_concat
[2024-12-01 13:46:01] Criterion: CrossEntropyLoss
[2024-12-01 13:46:01] Filter stopwords: None
[2024-12-01 13:46:01] 
Model Settings:
[2024-12-01 13:46:01] - Number of classes: 4
[2024-12-01 13:46:01] - Text model: bert-base-uncased
[2024-12-01 13:46:01] - Image model: regnet_y_32_linear
[2024-12-01 13:46:01] - Hidden sizes: [256]
[2024-12-01 13:46:01] - Use text: True
[2024-12-01 13:46:01] - Use image: True
[2024-12-01 13:46:01] - Use caption: True
[2024-12-01 13:46:01] - Caption mode: concat
[2024-12-01 13:46:01] - Use garbage feature: False
[2024-12-01 13:46:01] - Use similarity: False
[2024-12-01 13:46:01] 
Training Settings:
[2024-12-01 13:46:01] - Batch size: 24
[2024-12-01 13:46:01] - Learning rate: 1e-05
[2024-12-01 13:46:01] - Number of epochs: 50
[2024-12-01 13:46:01] - Max sequence length: 300
[2024-12-01 13:46:01] - Dropout rate: 0.3
[2024-12-01 13:46:01] - Early stopping patience: 5
[2024-12-01 13:46:01] - Weight decay: 0.01
[2024-12-01 13:46:01] - Label smoothing: 0.0
[2024-12-01 13:46:01] 
2024-12-01 13:46:01 - INFO - Initialized bert-base-uncased tokenizer
/home/tommy.li1/Git/ENGL645_Fall_2024_Proj/Project-Benchmark/main.py:374: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint = torch.load('checkpoints/best_model.pt')
[2024-12-01 13:46:01] Loading Train data from: /work/TALC/enel645_2024f/garbage_data/CVPR_2024_dataset_Train
[2024-12-01 13:46:01] Loading Val data from: /work/TALC/enel645_2024f/garbage_data/CVPR_2024_dataset_Val
[2024-12-01 13:46:01] Loading Test data from: /work/TALC/enel645_2024f/garbage_data/CVPR_2024_dataset_Test
Loaded captions: 15431
Loaded captions: 15431
Loaded captions: 15431

Train Dataset Statistics:
Size: 10200
Class distribution: {0: 2111, 1: 4355, 2: 1991, 3: 1743}

Val Dataset Statistics:
Size: 1800
Class distribution: {0: 372, 1: 768, 2: 352, 3: 308}

Test Dataset Statistics:
Size: 3431
Class distribution: {0: 695, 1: 1085, 2: 799, 3: 852}
[2024-12-01 13:46:07] Phase 1: Training classifier with frozen feature extractors
Model mode: False
[2024-12-01 14:18:26] Epoch 1/50 - Train Loss: 0.4749 - Val Loss: 0.3786 - Val Acc: 0.8706
Checkpoint saved to checkpoints/best_model.pt
[2024-12-01 14:18:32] Save best_model.pt for Loss at epochs 1 
Model mode: False
[2024-12-01 14:50:48] Epoch 2/50 - Train Loss: 0.2130 - Val Loss: 0.3040 - Val Acc: 0.9050
Checkpoint saved to checkpoints/best_model.pt
[2024-12-01 14:50:54] Save best_model.pt for Loss at epochs 2 
Model mode: False
[2024-12-01 15:23:10] Epoch 3/50 - Train Loss: 0.1327 - Val Loss: 0.3356 - Val Acc: 0.8972
Model mode: False
[2024-12-01 15:55:26] Epoch 4/50 - Train Loss: 0.0800 - Val Loss: 0.3321 - Val Acc: 0.9033
Model mode: False
[2024-12-01 16:27:43] Epoch 5/50 - Train Loss: 0.0581 - Val Loss: 0.3413 - Val Acc: 0.9050
Model mode: False
[2024-12-01 16:59:58] Epoch 6/50 - Train Loss: 0.0449 - Val Loss: 0.3619 - Val Acc: 0.9000
Model mode: False
[2024-12-01 17:32:13] Epoch 7/50 - Train Loss: 0.0382 - Val Loss: 0.3793 - Val Acc: 0.9039
[2024-12-01 17:32:13] Early stopping triggered after epochs 7 
[2024-12-01 17:32:14] Loading best model from Phase 1
[2024-12-01 17:32:23] Phase 2: Fine-tuning feature extractors

Feature Extractor States:
Text model exists: True
Text model trainable: True
Image model exists: True
Image model trainable: True
Traceback (most recent call last):
  File "/home/tommy.li1/Git/ENGL645_Fall_2024_Proj/Project-Benchmark/main.py", line 487, in <module>
    main()
  File "/home/tommy.li1/Git/ENGL645_Fall_2024_Proj/Project-Benchmark/main.py", line 404, in main
    fine_tune_history = trainer.train(
  File "/home/tommy.li1/Git/ENGL645_Fall_2024_Proj/Project-Benchmark/training/trainer.py", line 174, in train
    train_loss = self.train_epoch(train_loader)
  File "/home/tommy.li1/Git/ENGL645_Fall_2024_Proj/Project-Benchmark/training/trainer.py", line 66, in train_epoch
    outputs = self.model(
  File "/home/tommy.li1/miniforge3/envs/sam_env/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/tommy.li1/miniforge3/envs/sam_env/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/tommy.li1/Git/ENGL645_Fall_2024_Proj/Project-Benchmark/models/multimodal.py", line 152, in forward
    image_features = self.image_processor(images)
  File "/home/tommy.li1/miniforge3/envs/sam_env/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/tommy.li1/miniforge3/envs/sam_env/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/tommy.li1/Git/ENGL645_Fall_2024_Proj/Project-Benchmark/models/feature_extractors.py", line 215, in forward
    features = self.feature_extractor(x)
  File "/home/tommy.li1/miniforge3/envs/sam_env/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/tommy.li1/miniforge3/envs/sam_env/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/tommy.li1/miniforge3/envs/sam_env/lib/python3.10/site-packages/torch/nn/modules/container.py", line 250, in forward
    input = module(input)
  File "/home/tommy.li1/miniforge3/envs/sam_env/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/tommy.li1/miniforge3/envs/sam_env/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/tommy.li1/miniforge3/envs/sam_env/lib/python3.10/site-packages/torch/nn/modules/container.py", line 250, in forward
    input = module(input)
  File "/home/tommy.li1/miniforge3/envs/sam_env/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/tommy.li1/miniforge3/envs/sam_env/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/tommy.li1/miniforge3/envs/sam_env/lib/python3.10/site-packages/torch/nn/modules/container.py", line 250, in forward
    input = module(input)
  File "/home/tommy.li1/miniforge3/envs/sam_env/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/tommy.li1/miniforge3/envs/sam_env/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/tommy.li1/miniforge3/envs/sam_env/lib/python3.10/site-packages/torchvision/models/regnet.py", line 147, in forward
    x = x + self.f(x)
  File "/home/tommy.li1/miniforge3/envs/sam_env/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/tommy.li1/miniforge3/envs/sam_env/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/tommy.li1/miniforge3/envs/sam_env/lib/python3.10/site-packages/torch/nn/modules/container.py", line 250, in forward
    input = module(input)
  File "/home/tommy.li1/miniforge3/envs/sam_env/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/tommy.li1/miniforge3/envs/sam_env/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/tommy.li1/miniforge3/envs/sam_env/lib/python3.10/site-packages/torch/nn/modules/container.py", line 250, in forward
    input = module(input)
  File "/home/tommy.li1/miniforge3/envs/sam_env/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/tommy.li1/miniforge3/envs/sam_env/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/tommy.li1/miniforge3/envs/sam_env/lib/python3.10/site-packages/torch/nn/modules/conv.py", line 554, in forward
    return self._conv_forward(input, self.weight, self.bias)
  File "/home/tommy.li1/miniforge3/envs/sam_env/lib/python3.10/site-packages/torch/nn/modules/conv.py", line 549, in _conv_forward
    return F.conv2d(
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 26.00 MiB. GPU 0 has a total capacity of 14.58 GiB of which 1.56 MiB is free. Including non-PyTorch memory, this process has 14.57 GiB memory in use. Of the allocated memory 13.55 GiB is allocated by PyTorch, and 903.98 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
[nltk_data] Downloading package wordnet to
[nltk_data]     /home/tommy.li1/nltk_data...
[nltk_data]   Package wordnet is already up-to-date!
[nltk_data] Downloading package stopwords to
[nltk_data]     /home/tommy.li1/nltk_data...
[nltk_data]   Package stopwords is already up-to-date!
2024-12-01 17:32:44.575583: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2024-12-01 17:32:44.598986: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:485] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered
2024-12-01 17:32:44.628136: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:8454] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered
2024-12-01 17:32:44.637094: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1452] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered
2024-12-01 17:32:44.657767: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX512F AVX512_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
2024-12-01 17:32:47.365036: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT
2024-12-01 17:32:52 - INFO - Using device: cuda
[2024-12-01 17:32:52] 
Configuration:
[2024-12-01 17:32:52] Mode: test
[2024-12-01 17:32:52] Modality: text_caption_image_concat
[2024-12-01 17:32:52] Criterion: CrossEntropyLoss
[2024-12-01 17:32:52] Filter stopwords: None
[2024-12-01 17:32:52] 
Model Settings:
[2024-12-01 17:32:52] - Number of classes: 4
[2024-12-01 17:32:52] - Text model: bert-base-uncased
[2024-12-01 17:32:52] - Image model: regnet_y_32_linear
[2024-12-01 17:32:52] - Hidden sizes: [256]
[2024-12-01 17:32:52] - Use text: True
[2024-12-01 17:32:52] - Use image: True
[2024-12-01 17:32:52] - Use caption: True
[2024-12-01 17:32:52] - Caption mode: concat
[2024-12-01 17:32:52] - Use garbage feature: False
[2024-12-01 17:32:52] - Use similarity: False
[2024-12-01 17:32:52] 
Training Settings:
[2024-12-01 17:32:52] - Batch size: 24
[2024-12-01 17:32:52] - Learning rate: 1e-05
[2024-12-01 17:32:52] - Number of epochs: 50
[2024-12-01 17:32:52] - Max sequence length: 300
[2024-12-01 17:32:52] - Dropout rate: 0.3
[2024-12-01 17:32:52] - Early stopping patience: 5
[2024-12-01 17:32:52] - Weight decay: 0.01
[2024-12-01 17:32:52] - Label smoothing: 0.0
[2024-12-01 17:32:52] 
2024-12-01 17:32:52 - INFO - Initialized bert-base-uncased tokenizer
/home/tommy.li1/Git/ENGL645_Fall_2024_Proj/Project-Benchmark/main.py:453: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint = torch.load('checkpoints/best_model.pt')
[2024-12-01 17:32:52] Loading Train data from: /work/TALC/enel645_2024f/garbage_data/CVPR_2024_dataset_Train
[2024-12-01 17:32:52] Loading Val data from: /work/TALC/enel645_2024f/garbage_data/CVPR_2024_dataset_Val
[2024-12-01 17:32:52] Loading Test data from: /work/TALC/enel645_2024f/garbage_data/CVPR_2024_dataset_Test
Loaded captions: 15431
Loaded captions: 15431
Loaded captions: 15431

Train Dataset Statistics:
Size: 10200
Class distribution: {0: 2111, 1: 4355, 2: 1991, 3: 1743}

Val Dataset Statistics:
Size: 1800
Class distribution: {0: 372, 1: 768, 2: 352, 3: 308}

Test Dataset Statistics:
Size: 3431
Class distribution: {0: 695, 1: 1085, 2: 799, 3: 852}
Model mode: False
test_results['accuracy'] 0.8571844943165258
test_results['precision'] 0.8563521583344671
test_results['recall'] 0.8571844943165258
test_results['f1'] 0.8552652032129971
test_results['loss'] 0.406849597808677

Confusion Matrix:
--------------------------------------------------
[[495  92  34  74]
 [ 43 977  46  19]
 [ 11  20 766   2]
 [ 61  82   6 703]]
Classification results saved to test_classification_results.json
